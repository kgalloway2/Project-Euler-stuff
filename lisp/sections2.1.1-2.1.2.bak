#lang racket
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (numer y) (denom x))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

(define (make-rat n d)
  (let ((g (gcd n d)))
    (cons (/ n g) (/ d g))))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (abs x)
  (if (< x 0)
      (- x)
      x))

(define (average a b)
  (/ (+ a b) 2))

(define (make-segment start end) (cons start end))

(define (start-segment segment) (car segment))

(define (end-segment segment) (cdr segment))

(define (make-point x y) (cons x y))

(define (x-point point) (car point))

(define (y-point point) (cdr point))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define (midpoint-segment segment)
  (make-point (/ (+ (car (car segment))
                    (car (cdr segment)))
                 2)
              (/ (+ (cdr (car segment))
                    (cdr (cdr segment)))
                 2)))

(define (len-seg segment)
  (if (= (abs (- (x-point (car segment))
                 (x-point (cdr segment))))
         0)
      (abs (- (y-point (car segment))
              (y-point (cdr segment))))
      (abs (- (x-point (car segment))
              (x-point (cdr segment))))))

(define (make-rec point1 point2) (cons point1 point2))

(define (perimeter rectangle)
  (* 2 (+ (abs (- (x-point (car rectangle))
                  (x-point (cdr rectangle))))
          (abs (- (y-point (car rectangle))
                  (y-point (cdr rectangle)))))))

(define (area rectangle)
  (* (abs (- (x-point (car rectangle))
             (x-point (cdr rectangle))))
     (abs (- (y-point (car rectangle))
             (y-point (cdr rectangle))))))